generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  name       String?
  createdAt  DateTime @default(now())
  families   FamilyMember[]
  invitations Invitation[] @relation("invitee")
}

model Family {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  members   FamilyMember[]
  events    Event[]
  tasks     Task[]
}

model FamilyMember {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  family    Family  @relation(fields: [familyId], references: [id])
  familyId  Int
  role      String  @default("member") // owner, admin, member
  createdAt DateTime @default(now())

  @@unique([userId, familyId])
  @@map("family_members")
}

model Invitation {
  id         Int      @id @default(autoincrement())
  email      String
  token      String   @unique
  family     Family   @relation(fields: [familyId], references: [id])
  familyId   Int
  inviter    User     @relation(fields: [inviterId], references: [id])
  inviterId  Int
  accepted   Boolean  @default(false)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
}

model Event {
  id          Int      @id @default(autoincrement())
  family      Family   @relation(fields: [familyId], references: [id])
  familyId    Int
  title       String
  description String?
  date        DateTime
  time        String?
  createdAt   DateTime @default(now())
}

model Task {
  id          Int      @id @default(autoincrement())
  family      Family   @relation(fields: [familyId], references: [id])
  familyId    Int
  title       String
  description String?
  dueDate     DateTime?
  priority    String?  // low, medium, high
  done        Boolean  @default(false)
  createdAt   DateTime @default(now())
}
