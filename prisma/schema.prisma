generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  password        String
  firstName       String
  lastName        String
  phone           String?
  address         String?
  familyRole      String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  families        FamilyMember[]
  createdFamilies Family[]        @relation("FamilyCreator")
  createdActivities Activity[]
  activityParticipants ActivityParticipant[]
  userBadges      UserBadge[]
  sentInvitations FamilyInvitation[] @relation("InvitationSender")
  receivedInvitations FamilyInvitation[] @relation("InvitationReceiver")
  
  @@map("users")
}

model Family {
  id        Int       @id @default(autoincrement())
  name      String
  code      String    @unique
  createdBy Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  creator      User     @relation("FamilyCreator", fields: [createdBy], references: [id])
  members      FamilyMember[]
  activities   Activity[]
  invitations  FamilyInvitation[]
  
  @@map("families")
}

model FamilyMember {
  id       Int      @id @default(autoincrement())
  userId   Int
  familyId Int
  role     String
  avatar   String?
  isMinor  Boolean  @default(false)
  location String?
  joinedAt DateTime @default(now())
  
  // Relations
  user     User   @relation(fields: [userId], references: [id])
  family   Family @relation(fields: [familyId], references: [id])
  
  @@unique([userId, familyId])
  @@map("family_members")
}

model Activity {
  id                 Int      @id @default(autoincrement())
  title              String
  description        String?
  location           String?
  activityDate       DateTime
  duration           Int?     // en minutes
  category           String?
  accessibilityLevel String?
  createdBy          Int
  familyId           Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relations
  creator            User     @relation(fields: [createdBy], references: [id])
  family             Family   @relation(fields: [familyId], references: [id])
  participants       ActivityParticipant[]
  
  @@map("activities")
}

model ActivityParticipant {
  id         Int      @id @default(autoincrement())
  activityId Int
  userId     Int
  status     String   @default("pending") // pending, accepted, declined
  respondedAt DateTime?
  
  // Relations
  activity   Activity @relation(fields: [activityId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  
  @@unique([activityId, userId])
  @@map("activity_participants")
}

model Badge {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  icon        String?
  createdAt   DateTime @default(now())
  
  // Relations
  userBadges  UserBadge[]
  
  @@map("badges")
}

model UserBadge {
  id      Int      @id @default(autoincrement())
  userId  Int
  badgeId Int
  earnedAt DateTime @default(now())
  
  // Relations
  user    User   @relation(fields: [userId], references: [id])
  badge   Badge  @relation(fields: [badgeId], references: [id])
  
  @@unique([userId, badgeId])
  @@map("user_badges")
}

model FamilyInvitation {
  id           Int      @id @default(autoincrement())
  familyId     Int
  senderId     Int
  receiverId   Int
  email        String
  status       String   @default("pending") // pending, accepted, declined
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  
  // Relations
  family       Family   @relation(fields: [familyId], references: [id])
  sender       User     @relation("InvitationSender", fields: [senderId], references: [id])
  receiver     User     @relation("InvitationReceiver", fields: [receiverId], references: [id])
  
  @@map("family_invitations")
}
