// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  password     String
  familyRole   String   @map("family_role")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Relations
  families     FamilyMember[]
  createdFamilies Family[] @relation("FamilyCreator")
  createdActivities Activity[]
  activities   ActivityParticipant[]
  badges       UserBadge[]
  sentInvitations FamilyInvitation[] @relation("InvitationSender")
  receivedInvitations FamilyInvitation[] @relation("InvitationReceiver")
  
  @@map("users")
}

model Family {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdBy Int      @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  creator   User     @relation("FamilyCreator", fields: [createdBy], references: [id])
  members   FamilyMember[]
  activities Activity[]
  invitations FamilyInvitation[]
  
  @@map("families")
}

model FamilyMember {
  id       Int    @id @default(autoincrement())
  userId   Int    @map("user_id")
  familyId Int    @map("family_id")
  role     String
  joinedAt DateTime @default(now()) @map("joined_at")
  
  // Relations
  user     User   @relation(fields: [userId], references: [id])
  family   Family @relation(fields: [familyId], references: [id])
  
  @@unique([userId, familyId])
  @@map("family_members")
}

model Activity {
  id                 Int      @id @default(autoincrement())
  title              String
  description        String?
  location           String?
  activityDate       DateTime @map("activity_date")
  duration           Int?     // en minutes
  category           String?
  accessibilityLevel String?  @map("accessibility_level")
  createdBy          Int      @map("created_by")
  familyId           Int      @map("family_id")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  
  // Relations
  creator            User     @relation(fields: [createdBy], references: [id])
  family             Family   @relation(fields: [familyId], references: [id])
  participants       ActivityParticipant[]
  
  @@map("activities")
}

model ActivityParticipant {
  id         Int      @id @default(autoincrement())
  activityId Int      @map("activity_id")
  userId     Int      @map("user_id")
  status     String   @default("pending") // pending, accepted, declined
  respondedAt DateTime? @map("responded_at")
  
  // Relations
  activity   Activity @relation(fields: [activityId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  
  @@unique([activityId, userId])
  @@map("activity_participants")
}

model Badge {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  icon        String?
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  users       UserBadge[]
  
  @@map("badges")
}

model UserBadge {
  id      Int      @id @default(autoincrement())
  userId  Int      @map("user_id")
  badgeId Int      @map("badge_id")
  earnedAt DateTime @default(now()) @map("earned_at")
  
  // Relations
  user    User     @relation(fields: [userId], references: [id])
  badge   Badge    @relation(fields: [badgeId], references: [id])
  
  @@unique([userId, badgeId])
  @@map("user_badges")
}

model FamilyInvitation {
  id           Int      @id @default(autoincrement())
  familyId     Int      @map("family_id")
  senderId     Int      @map("sender_id")
  receiverId   Int      @map("receiver_id")
  email        String
  status       String   @default("pending") // pending, accepted, declined
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")
  
  // Relations
  family       Family   @relation(fields: [familyId], references: [id])
  sender       User     @relation("InvitationSender", fields: [senderId], references: [id])
  receiver     User     @relation("InvitationReceiver", fields: [receiverId], references: [id])
  
  @@map("family_invitations")
}
